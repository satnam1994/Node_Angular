{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/admin/admin.component.html","./src/app/app.component.html","./src/app/home/home.component.html","./src/app/login/login.component.html","./src/app/register/register.component.html","./src/app/_helpers/auth.guard.ts","./src/app/_helpers/error.interceptor.ts","./src/app/_helpers/index.ts","./src/app/_helpers/jwt.interceptor.ts","./src/app/_helpers/real-backend.ts","./src/app/_models/index.ts","./src/app/_models/role.ts","./src/app/_models/user.ts","./src/app/_services/authentication.service.ts","./src/app/_services/index.ts","./src/app/_services/user.service.ts","./src/app/admin/admin.component.ts","./src/app/admin/index.ts","./src/app/app.component.ts","./src/app/app.module.ts","./src/app/app.routing.ts","./src/app/home/home.component.ts","./src/app/home/index.ts","./src/app/login/index.ts","./src/app/login/login.component.ts","./src/app/register/index.ts","./src/app/register/register.component.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","module.exports = \"<div class=\\\"card mt-4\\\">\\n    <h4 class=\\\"card-header\\\">Admin</h4>\\n    <div class=\\\"card-body\\\">\\n        <p>This page can be accessed <u>only by administrators</u>.</p>\\n        <p class=\\\"mb-1\\\">All users from secure (admin only) api end point:</p>\\n        <div *ngIf=\\\"loading\\\" class=\\\"spinner-border spinner-border-sm\\\"></div>\\n        <ul *ngIf=\\\"users\\\">\\n            <li *ngFor=\\\"let user of users\\\">{{user.firstName}} {{user.lastName}}</li>\\n        </ul>\\n    </div>\\n</div>\"","module.exports = \"<!-- nav -->\\n<nav class=\\\"navbar navbar-expand navbar-dark bg-dark\\\" *ngIf=\\\"currentUser\\\">\\n    <div class=\\\"navbar-nav\\\">\\n        <a class=\\\"nav-item nav-link\\\" routerLink=\\\"/\\\">Home</a>\\n        <a class=\\\"nav-item nav-link\\\" routerLink=\\\"/admin\\\" *ngIf=\\\"isAdmin\\\">Admin</a>\\n        <a class=\\\"nav-item nav-link\\\" (click)=\\\"logout()\\\">Logout</a>\\n    </div>\\n</nav>\\n\\n<!-- main app container -->\\n<div class=\\\"container\\\">\\n    <router-outlet></router-outlet>\\n</div>\\n\\n<!-- credits -->\\n<div class=\\\"text-center mt-4\\\">\\n</div>\"","module.exports = \"<div class=\\\"card mt-4\\\">\\n    <h4 class=\\\"card-header\\\">Home</h4>\\n    <div class=\\\"card-body\\\">\\n        <p>You're logged in with Angular 8 & JWT!!</p>\\n        <p>Your role is: <strong>{{currentUser.role}}</strong>.</p>\\n        <p>This page can be accessed by <u>all authenticated users</u>.</p>\\n        <p class=\\\"mb-1\\\">Current user from secure api end point:</p>\\n        <div *ngIf=\\\"loading\\\" class=\\\"spinner-border spinner-border-sm\\\"></div>\\n        <ul *ngIf=\\\"userFromApi\\\">\\n            <li>{{userFromApi.firstName}} {{userFromApi.lastName}}</li>\\n        </ul>\\n    </div>\\n</div>\"","module.exports = \"<div class=\\\"col-md-6 offset-md-3 mt-5\\\">\\n    <div class=\\\"alert alert-info\\\">\\n        <strong>Normal User</strong> - U: user P: user<br />\\n        <strong>Administrator</strong> - U: admin P: admin\\n    </div>\\n    <div class=\\\"card\\\">\\n        <div class=\\\"text-center mt-4\\\">\\n            <h4 class=\\\"card-header\\\">Login Form</h4>\\n        </div>\\n        <div class=\\\"card-body\\\">\\n            <form [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"user_email\\\">Email</label>\\n                    <input type=\\\"text\\\" formControlName=\\\"user_email\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.user_email.errors }\\\" />\\n                    <div *ngIf=\\\"submitted && f.user_email.errors\\\" class=\\\"invalid-feedback\\\">\\n                        <div *ngIf=\\\"f.user_email.errors.required\\\">Email is required</div>\\n                        <div *ngIf=\\\"f.user_email.errors.email\\\">Email must be a valid email address</div>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"password\\\">Password</label>\\n                    <input type=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.password.errors }\\\" />\\n                    <div *ngIf=\\\"submitted && f.password.errors\\\" class=\\\"invalid-feedback\\\">\\n                        <div *ngIf=\\\"f.password.errors.required\\\">Password is required</div>\\n                    </div>\\n                </div>\\n                <button [disabled]=\\\"loading\\\" class=\\\"btn btn-primary\\\">\\n                    <span *ngIf=\\\"loading\\\" class=\\\"spinner-border spinner-border-sm mr-1\\\"></span>\\n                    Login\\n                </button>\\n                <div *ngIf=\\\"error\\\" class=\\\"alert alert-danger mt-3 mb-0\\\">{{error}}</div>\\n            </form>\\n        </div>\\n    </div>\\n</div>            \"","module.exports = \"<div class=\\\"col-md-6 offset-md-3 mt-5\\\">\\n    <!--div class=\\\"alert alert-info\\\">\\n    </div-->\\n    <div class=\\\"card\\\">\\n        <div class=\\\"text-center mt-4\\\">\\n            <h4 class=\\\"card-header\\\">Register Form</h4>\\n        </div>\\n        <div class=\\\"card-body\\\">\\n            <form [formGroup]=\\\"registerForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"firstName\\\">First Name</label>\\n                    <input type=\\\"text\\\" formControlName=\\\"firstName\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.firstName.errors }\\\" />\\n                    <div *ngIf=\\\"submitted && f.firstName.errors\\\" class=\\\"invalid-feedback\\\">\\n                        <div *ngIf=\\\"f.firstName.errors.required\\\">First Name is required</div>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"lastName\\\">Last Name</label>\\n                    <input type=\\\"text\\\" formControlName=\\\"lastName\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.lastName.errors }\\\" />\\n                    <div *ngIf=\\\"submitted && f.lastName.errors\\\" class=\\\"invalid-feedback\\\">\\n                        <div *ngIf=\\\"f.lastName.errors.required\\\">Last Name is required</div>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"user_email\\\">Email</label>\\n                    <input type=\\\"text\\\" formControlName=\\\"user_email\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.user_email.errors }\\\" />\\n                    <div *ngIf=\\\"submitted && f.user_email.errors\\\" class=\\\"invalid-feedback\\\">\\n                        <div *ngIf=\\\"f.user_email.errors.required\\\">Email is required</div>\\n                        <div *ngIf=\\\"f.user_email.errors.email\\\">Email must be a valid email address</div>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"password\\\">Password</label>\\n                    <input type=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.password.errors }\\\" />\\n                    <div *ngIf=\\\"submitted && f.password.errors\\\" class=\\\"invalid-feedback\\\">\\n                        <div *ngIf=\\\"f.password.errors.required\\\">Password is required</div>\\n                    </div>\\n                </div>\\n                <button [disabled]=\\\"loading\\\" class=\\\"btn btn-primary\\\">\\n                    <span *ngIf=\\\"loading\\\" class=\\\"spinner-border spinner-border-sm mr-1\\\"></span>\\n                    Register\\n                </button>\\n                <div *ngIf=\\\"error\\\" class=\\\"alert alert-danger mt-3 mb-0\\\">{{error}}</div>\\n            </form>\\n        </div>\\n    </div>\\n</div>            \"","import { Injectable } from '@angular/core';\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\n\nimport { AuthenticationService } from '@app/_services';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthGuard implements CanActivate {\n    constructor(\n        private router: Router,\n        private authenticationService: AuthenticationService\n    ) { }\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n        const currentUser = this.authenticationService.currentUserValue;\n        if (currentUser) {\n            // check if route is restricted by role\n            if (route.data.roles && route.data.roles.indexOf(currentUser.role) === -1) {\n                // role not authorised so redirect to home page\n                this.router.navigate(['/']);\n                return false;\n            }\n\n            // authorised so return true\n            return true;\n        }\n\n        // not logged in so redirect to login page with the return url\n        this.router.navigate(['/login'], { queryParams: { returnUrl: state.url } });\n        return false;\n    }\n}","import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { AuthenticationService } from '@app/_services';\n\n@Injectable()\nexport class ErrorInterceptor implements HttpInterceptor {\n    constructor(private authenticationService: AuthenticationService) { }\n\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        return next.handle(request).pipe(catchError(err => {\n            if ([401, 403].indexOf(err.status) !== -1) {\n                // auto logout if 401 Unauthorized or 403 Forbidden response returned from api\n                this.authenticationService.logout();\n                location.reload(true);\n            }\n\n            const error = err.error.message || err.statusText;\n            return throwError(error);\n        }))\n    }\n}","export * from './auth.guard';\nexport * from './error.interceptor';\nexport * from './real-backend';\nexport * from './jwt.interceptor';","import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { environment } from '@environments/environment';\nimport { AuthenticationService } from '@app/_services';\n\n@Injectable()\nexport class JwtInterceptor implements HttpInterceptor {\n    constructor(private authenticationService: AuthenticationService) { }\n\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        // add auth header with jwt if user is logged in and request is to api url\n        const currentUser = this.authenticationService.currentUserValue;\n        const isLoggedIn = currentUser && currentUser.token;\n        const isApiUrl = request.url.startsWith(environment.apiUrl);\n        if (isLoggedIn && isApiUrl) {\n            request = request.clone({\n                setHeaders: {\n                    Authorization: `Bearer ${currentUser.token}`\n                }\n            });\n        }\n\n        return next.handle(request);\n    }\n}","import { Injectable } from '@angular/core';\r\nimport { HttpRequest, HttpResponse, HttpHandler, HttpEvent, HttpInterceptor, HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { Observable, of, throwError } from 'rxjs';\r\nimport { delay, mergeMap, materialize, dematerialize } from 'rxjs/operators';\r\n\r\nimport { User, Role } from '@app/_models';\r\n\r\nconst users: User[] = [\r\n    { id: 1, user_email: 'admin@gmail.com', password: 'admin', firstName: 'Admin', lastName: 'User', role: Role.Admin },\r\n    { id: 2, user_email: 'user@gmail.com', password: 'user', firstName: 'Normal', lastName: 'User', role: Role.User }\r\n];\r\n\r\n@Injectable()\r\nexport class RealBackendInterceptor implements HttpInterceptor {\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        const { url, method, headers, body } = request;\r\n\r\n        // wrap in delayed observable to simulate server api call\r\n        return of(null)\r\n            .pipe(mergeMap(handleRoute))\r\n            .pipe(materialize()) // call materialize and dematerialize to ensure delay even if an error is thrown (https://github.com/Reactive-Extensions/RxJS/issues/648)\r\n            .pipe(delay(500))\r\n            .pipe(dematerialize());\r\n\r\n        function handleRoute() {\r\n            switch (true) {\r\n                case url.endsWith('/users/authenticate') && method === 'POST':\r\n                    return authenticate();\r\n                case url.endsWith('/register') && method === 'POST':\r\n                    return register();    \r\n                case url.endsWith('/users') && method === 'GET':\r\n                    return getUsers();\r\n                case url.match(/\\/users\\/\\d+$/) && method === 'GET':\r\n                    return getUserById();\r\n                default:\r\n                    // pass through any requests not handled above\r\n                    return next.handle(request);\r\n            }\r\n\r\n        }\r\n\r\n        // route function\r\n        function register() {\r\n            console.log(\"working\")\r\n            const { firstName, lastName, user_email, password } = body;\r\n            const user = users.find(x => x.user_email === user_email);\r\n            if (user) return error('Email Already in use');\r\n        }    \r\n\r\n        function authenticate() {\r\n            const { user_email, password } = body;\r\n            const user = users.find(x => x.user_email === user_email && x.password === password);\r\n            if (!user) return error('Email or password is incorrect');\r\n            return ok({\r\n                id: user.id,\r\n                user_email: user.user_email,\r\n                firstName: user.firstName,\r\n                lastName: user.lastName,\r\n                role: user.role,\r\n                token: `fake-jwt-token.${user.id}`\r\n            });\r\n        }\r\n\r\n        function getUsers() {\r\n            if (!isAdmin()) return unauthorized();\r\n            return ok(users);\r\n        }\r\n\r\n        function getUserById() {\r\n            if (!isLoggedIn()) return unauthorized();\r\n\r\n            // only admins can access other user records\r\n            if (!isAdmin() && currentUser().id !== idFromUrl()) return unauthorized();\r\n\r\n            const user = users.find(x => x.id === idFromUrl());\r\n            return ok(user);\r\n        }\r\n\r\n        // helper functions\r\n\r\n        function ok(body) {\r\n            return of(new HttpResponse({ status: 200, body }));\r\n        }\r\n\r\n        function unauthorized() {\r\n            return throwError({ status: 401, error: { message: 'unauthorized' } });\r\n        }\r\n\r\n        function error(message) {\r\n            return throwError({ status: 400, error: { message } });\r\n        }\r\n\r\n        function isLoggedIn() {\r\n            const authHeader = headers.get('Authorization') || '';\r\n            return authHeader.startsWith('Bearer fake-jwt-token');\r\n        }\r\n\r\n        function isAdmin() {\r\n            return isLoggedIn() && currentUser().role === Role.Admin;\r\n        }\r\n\r\n        function currentUser() {\r\n            if (!isLoggedIn()) return;\r\n            const id = parseInt(headers.get('Authorization').split('.')[1]);\r\n            return users.find(x => x.id === id);\r\n        }\r\n\r\n        function idFromUrl() {\r\n            const urlParts = url.split('/');\r\n            return parseInt(urlParts[urlParts.length - 1]);\r\n        }\r\n    }\r\n}\r\n\r\nexport const realBackendProvider = {\r\n    // use fake backend in place of Http service for backend-less development\r\n    provide: HTTP_INTERCEPTORS,\r\n    useClass: RealBackendInterceptor,\r\n    multi: true\r\n};","export * from './role';\nexport * from './user';","export enum Role {\n    User = 'User',\n    Admin = 'Admin'\n}","import { Role } from \"./role\";\n\nexport class User {\n    id: number;\n    user_email: string;\n    password: string;\n    firstName: string;\n    lastName: string;\n    role: Role;\n    token?: string;\n}","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { environment } from '@environments/environment';\nimport { User } from '@app/_models';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthenticationService {\n    private currentUserSubject: BehaviorSubject<User>;\n    public currentUser: Observable<User>;\n\n    constructor(private http: HttpClient) {\n        this.currentUserSubject = new BehaviorSubject<User>(JSON.parse(localStorage.getItem('currentUser')));\n        this.currentUser = this.currentUserSubject.asObservable();\n    }\n\n    public get currentUserValue(): User {\n        return this.currentUserSubject.value;\n    }\n\n    register(firstName: string, lastName: string, user_email: string, password: string) {\n        return this.http.post<any>(`${environment.apiUrl}/register`, { firstName, lastName, user_email, password})\n            .pipe(map(user => {\n                // login successful if there's a jwt token in the response\n                if (user && user.token) {\n                    // store user details and jwt token in local storage to keep user logged in between page refreshes\n                    localStorage.setItem('currentUser', JSON.stringify(user));\n                    this.currentUserSubject.next(user);\n                }\n\n                return user;\n            }));\n    }    \n\n    login(username: string, password: string) {\n        return this.http.post<any>(`${environment.apiUrl}/users/authenticate`, { username, password })\n            .pipe(map(user => {\n                // login successful if there's a jwt token in the response\n                if (user && user.token) {\n                    // store user details and jwt token in local storage to keep user logged in between page refreshes\n                    localStorage.setItem('currentUser', JSON.stringify(user));\n                    this.currentUserSubject.next(user);\n                }\n\n                return user;\n            }));\n    }\n\n    logout() {\n        // remove user from local storage to log user out\n        localStorage.removeItem('currentUser');\n        this.currentUserSubject.next(null);\n    }\n}","export * from './authentication.service';\nexport * from './user.service';","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { environment } from '@environments/environment';\nimport { User } from '@app/_models';\n\n@Injectable({ providedIn: 'root' })\nexport class UserService {\n    constructor(private http: HttpClient) { }\n\n    getAll() {\n        return this.http.get<User[]>(`${environment.apiUrl}/users`);\n    }\n\n    getById(id: number) {\n        return this.http.get<User>(`${environment.apiUrl}/users/${id}`);\n    }\n}","import { Component, OnInit } from '@angular/core';\nimport { first } from 'rxjs/operators';\n\nimport { User } from '@app/_models';\nimport { UserService } from '@app/_services';\n\n@Component({ templateUrl: 'admin.component.html' })\nexport class AdminComponent implements OnInit {\n    loading = false;\n    users: User[] = [];\n\n    constructor(private userService: UserService) { }\n\n    ngOnInit() {\n        this.loading = true;\n        this.userService.getAll().pipe(first()).subscribe(users => {\n            this.loading = false;\n            this.users = users;\n        });\n    }\n}","export * from './admin.component';","import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { AuthenticationService } from './_services';\nimport { User, Role } from './_models';\n\n@Component({ selector: 'app', templateUrl: 'app.component.html' })\nexport class AppComponent {\n    currentUser: User;\n\n    constructor(\n        private router: Router,\n        private authenticationService: AuthenticationService\n    ) {\n        this.authenticationService.currentUser.subscribe(x => this.currentUser = x);\n    }\n\n    get isAdmin() {\n        return this.currentUser && this.currentUser.role === Role.Admin;\n    }\n\n    logout() {\n        this.authenticationService.logout();\n        this.router.navigate(['/login']);\n    }\n}","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\n\n// used to create fake backend\nimport { realBackendProvider } from './_helpers';\n\nimport { AppComponent } from './app.component';\nimport { appRoutingModule } from './app.routing';\n\nimport { JwtInterceptor, ErrorInterceptor } from './_helpers';\nimport { HomeComponent } from './home';\nimport { AdminComponent } from './admin';\nimport { LoginComponent } from './login';\nimport { RegisterComponent } from './register';\n\n@NgModule({\n    imports: [\n        BrowserModule,\n        ReactiveFormsModule,\n        HttpClientModule,\n        appRoutingModule\n    ],\n    declarations: [\n        AppComponent,\n        HomeComponent,\n        AdminComponent,\n        LoginComponent,\n        RegisterComponent\n    ],\n    providers: [\n        { provide: HTTP_INTERCEPTORS, useClass: JwtInterceptor, multi: true },\n        { provide: HTTP_INTERCEPTORS, useClass: ErrorInterceptor, multi: true },\n\n        // provider used to create fake backend\n        realBackendProvider\n    ],\n    bootstrap: [AppComponent]\n})\n\nexport class AppModule { }","import { Routes, RouterModule } from '@angular/router';\n\nimport { HomeComponent } from './home';\nimport { AdminComponent } from './admin';\nimport { LoginComponent } from './login';\nimport { RegisterComponent } from './register';\nimport { AuthGuard } from './_helpers';\nimport { Role } from './_models';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: HomeComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: 'admin',\n        component: AdminComponent,\n        canActivate: [AuthGuard],\n        data: { roles: [Role.Admin] }\n    },\n    {\n        path: 'login',\n        component: LoginComponent\n    },\n    {\n        path: 'register',\n        component: RegisterComponent\n    },\n\n    // otherwise redirect to home\n    { path: '**', redirectTo: '' }\n];\n\nexport const appRoutingModule = RouterModule.forRoot(routes);","import { Component } from '@angular/core';\nimport { first } from 'rxjs/operators';\n\nimport { User } from '@app/_models';\nimport { UserService, AuthenticationService } from '@app/_services';\n\n@Component({ templateUrl: 'home.component.html' })\nexport class HomeComponent {\n    loading = false;\n    currentUser: User;\n    userFromApi: User;\n\n    constructor(\n        private userService: UserService,\n        private authenticationService: AuthenticationService\n    ) {\n        this.currentUser = this.authenticationService.currentUserValue;\n    }\n\n    ngOnInit() {\n        this.loading = true;\n        this.userService.getById(this.currentUser.id).pipe(first()).subscribe(user => {\n            this.loading = false;\n            this.userFromApi = user;\n        });\n    }\n}","export * from './home.component';","export * from './login.component';","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\n\nimport { AuthenticationService } from '@app/_services';\n\n@Component({ templateUrl: 'login.component.html' })\nexport class LoginComponent implements OnInit {\n    loginForm: FormGroup;\n    loading = false;\n    submitted = false;\n    returnUrl: string;\n    error = '';\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private route: ActivatedRoute,\n        private router: Router,\n        private authenticationService: AuthenticationService\n    ) { \n        // redirect to home if already logged in\n        if (this.authenticationService.currentUserValue) { \n            this.router.navigate(['/']);\n        }\n    }\n\n    ngOnInit() {\n        this.loginForm = this.formBuilder.group({\n            user_email: ['', [Validators.required, Validators.email]],\n            password: ['', Validators.required]\n        });\n\n        // get return url from route parameters or default to '/'\n        this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n    }\n\n    // convenience getter for easy access to form fields\n    get f() { return this.loginForm.controls; }\n\n    onSubmit() {\n        this.submitted = true;\n\n        // stop here if form is invalid\n        if (this.loginForm.invalid) {\n            return;\n        }\n\n        this.loading = true;\n        this.authenticationService.login(this.f.username.value, this.f.password.value)\n            .pipe(first())\n            .subscribe(\n                data => {\n                    this.router.navigate([this.returnUrl]);\n                },\n                error => {\n                    this.error = error;\n                    this.loading = false;\n                });\n    }\n}\n","export * from './register.component';","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\n\nimport { AuthenticationService } from '@app/_services';\n\n@Component({ templateUrl: 'register.component.html' })\nexport class RegisterComponent implements OnInit {\n    registerForm: FormGroup;\n    loading = false;\n    submitted = false;\n    returnUrl: string;\n    error = '';\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private route: ActivatedRoute,\n        private router: Router,\n        private authenticationService: AuthenticationService\n    ) { \n        // redirect to home if already logged in\n        if (this.authenticationService.currentUserValue) { \n            this.router.navigate(['/']);\n        }\n    }\n\n    ngOnInit() {\n        this.registerForm = this.formBuilder.group({\n            firstName: ['', Validators.required],\n            lastName: ['', Validators.required],\n            user_email: ['', [Validators.required, Validators.email]],\n            password: ['', Validators.required]\n        });\n\n        // get return url from route parameters or default to '/'\n        this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n    }\n\n    // convenience getter for easy access to form fields\n    get f() { return this.registerForm.controls; }\n\n    onSubmit() {\n        this.submitted = true;\n\n        // stop here if form is invalid\n        if (this.registerForm.invalid) {\n            return;\n        }\n\n        this.loading = true;\n        this.authenticationService.register(this.f.firstName.value, this.f.lastName.value, this.f.user_email.value, this.f.password.value)\n          .pipe(first())\n            .subscribe(\n                data => {\n                    this.router.navigate([this.returnUrl]);\n                },\n                error => {\n                    this.error = error;\n                    this.loading = false;\n                });\n    }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n    production: false,\n    apiUrl: 'http://localhost:4000'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n    enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n    .catch(err => console.error(err));\n"],"sourceRoot":""}